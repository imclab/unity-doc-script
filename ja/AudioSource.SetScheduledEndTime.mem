<signature>
SetScheduledEndTime(double)
</signature>
再生するスケジュールが確定した音声について、終了時刻を変更します。タイミングによっては再スケジュールのリクエストは満たされない場合があることに注意して下さい。
指定された時間はまだ絶対時間のタイムラインであることに留意して下さい。すなわち音声は、いつ開始されたかに関わらず、その時刻に到達したときに停止します。例えば 5 秒間の音声があり、時刻 T に再生そて 3 秒後に停止する（すなわち最後の 2 秒間を無音にする）ことを期待する場合、終了時刻は T+3 と指定する必要があります。フレームベースのロス発生のあるコーデックにより引き起こされるシグナルの不連続性を乗り越える場合に、この関数は役に立ちます。
CONVERTEXAMPLE
BEGIN EX
// クリップを短い重なりのある二つのクリップに分割して、再生時刻に連結するツールのデモです。
// 重なり時間 0.2 秒が使用されており、これはクリップがほぼ同じ長さの時間に分割されることを意味し、
// 最初の音声がカットから 0.2 秒後まで、二つめの音声が
// カットから 0.2 秒前までです。
// ポイントは cut1 を開始からカット時点mあで再生し、それから再生を停止（再生されていない状態）して
// 0.2 秒の重なりさせ（SetScheduledEndTime を通して発生）、次に cut2 がサウンドから 0.2 秒で開始し、
// 最後まで再生させます。
// 非圧縮音声において、これが不要に複雑に見える一方で、
// https://gist.github.com/2317063 にある SavWav を使用することで生成された音声を新しいアセットに保存することが出来、
// プログラムを指定された sourceClip で一回実行して、スクリプトは "cut1.wav" および "cut2.wav" を生成します。
// これらは Unity にアセットとしてインポートすることが出来、圧縮音声に変更できます。
// 心理音響的な圧縮は音声の波形および周波数のコンテンツに重篤な変更を加え
// またブロックベースの形で処理されるため、音声データのカット時点の前後でポップやクリック（音がはねる）
// が明確に気付くようになります。これがあることにより再生してないときもデコーダによるウォームアップが行なわれ
// すなわち、移行の前後で一致する周波数のコンテンツがあり、せめて
// 周波数巣ペクトラムは移行の前後でほぼ同じとなり、そして、もし0.2 秒の重なりエリア
// なく音声を分割した場合と比べて、クリック（音がはねる）ことは気付きにくくなります。
// この手法はさらにクロスフェードと組み合わせて残る異常をスムージングすることが出来ます。

@script RequireComponent(AudioSource)

public var sourceClip : AudioClip;

private var audio1 : AudioSource;
private var audio2 : AudioSource;
private var cutClip1 : AudioClip;
private var cutClip2 : AudioClip;
private var overlap : float = 0.2f;
private var len1 : int = 0;
private var len2 : int = 0;

function Start ()
{
	var child : GameObject;
	child = new GameObject("Player1"); child.transform.parent = gameObject.transform; audio1 = child.AddComponent("AudioSource");
	child = new GameObject("Player2"); child.transform.parent = gameObject.transform; audio2 = child.AddComponent("AudioSource");
	var overlapSamples : int;
	if(sourceClip != null)
	{
		len1 = sourceClip.samples / 2;
		len2 = sourceClip.samples - len1;
		overlapSamples = overlap * sourceClip.frequency;
		cutClip1 = AudioClip.Create ("cut1", len1 + overlapSamples, sourceClip.channels, sourceClip.frequency, false, false);
		cutClip2 = AudioClip.Create ("cut2", len2 + overlapSamples, sourceClip.channels, sourceClip.frequency, false, false);
		var smp1 = new float [(len1 + overlapSamples) * sourceClip.channels];
		var smp2 = new float [(len2 + overlapSamples) * sourceClip.channels];
		sourceClip.GetData(smp1, 0);
		sourceClip.GetData(smp2, len1 - overlapSamples);
		cutClip1.SetData(smp1, 0);
		cutClip2.SetData(smp2, 0);
		//SavWav.Save("cut1.wav", cutClip1);
		//SavWav.Save("cut2.wav", cutClip2);
	}
	else
	{
		overlapSamples = overlap * cutClip1.frequency;
		len1 = cutClip1.samples - overlapSamples;
		len2 = cutClip2.samples - overlapSamples;
	}
}

function OnGUI()
{
	if (GUI.Button(new Rect(10, 50, 230, 40), "Trigger source"))
		audio1.PlayOneShot(sourceClip);
	if (GUI.Button(new Rect(10, 100, 230, 40), "Trigger cut 1"))
		audio1.PlayOneShot(cutClip1);
	if (GUI.Button(new Rect(10, 150, 230, 40), "Trigger cut 2"))
		audio1.PlayOneShot(cutClip2);
	if (GUI.Button(new Rect(10, 200, 230, 40), "Play stitched"))
	{
		audio1.clip = cutClip1;
		audio2.clip = cutClip2;
		var t0 = AudioSettings.dspTime + 3.0;
		var clipTime1 : double = len1;
		clipTime1 /= cutClip1.frequency;
		audio1.PlayScheduled(t0);
		audio1.SetScheduledEndTime(t0 + clipTime1);
		Debug.Log("t0 = " + t0 + ", clipTime1 = " + clipTime1 + ", cutClip1.frequency = " + cutClip1.frequency);
		Debug.Log("cutClip2.frequency = " + cutClip2.frequency + ", samplerate = " + AudioSettings.outputSampleRate);
		audio2.PlayScheduled(t0 + clipTime1);
		audio2.time = overlap;
	}
}
END EX
__注意:__ もし可能であれば重なりのある音声を作成し、そして ScheduledEndTime を最初の音声に使用して、二つめの音声に AudioSource::ref::time を使用して重なり部分を上記のサンプルのようにトリミングして下さい。
@param time 秒単位の時間。