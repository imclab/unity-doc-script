プロパティ Drawer の派生元ベースクラス
これを使用して自身のマテリアルプロパティのためのカスタム UI Drawer を、カスタムの [[MaterialEditor]] クラスを記述することなく、作成できます。このクラスは [[PropertyDrawer]] がカスタムのインスペクタを記述することなくカスタム UI を可能にする方法に似ています。

シェーダ コードでは C# のような属性の文法を、シェーダ プロパティの前に使用して Drawer を追加できます。Unity には幾つかのビルトインの Drawer があり、自身で記述することも出来ます。次に文法を示すシェーダ コードのスニペットを示します:

BEGIN EX NOCHECK
Shader "Custom/Example" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}

		// None,Add,Multiply を選択肢としたポップアップを表示したうえ
		// 対応するシェーダ キーワードをセットアップ
		[KeywordEnum(None, Add, Multiply)] _Overlay ("Overlay mode", Float) = 0

		_OverlayTex ("Overlay", 2D) = "black" {}

		// トグルとして表示
		[Toggle] _Invert ("Invert color?", Float) = 0
	}
	// 残りのシェーダ コードをここに記述...
}
END EX

{img MaterialPropertyDrawer_UI.png}\\
''ビルトイン プロパティ Drawer 付きマテリアル インスペクタ。''

自身の Drawer を実装するとき、OnGUI 関数をオーバーライドすべきです。さらにGetPropertyHeight および Apply 関数のオーバーライドするオプションがあります。次のサンプルでは、プロパティ Drawer により float プロパティのチェックボックスを表示したうえ、状態にもとづき値を 0 または 1 にセットします。

CONVERTEXAMPLE
BEGIN EX
// プロパティ Drawer クラスはエディタ スクリプトとして、 Editor という名前のフォルダの中に配置すべきです。

// float シェーダ プロパティの前に "[MyToggle]" と共に使用すべきです
class MyToggleDrawer extends MaterialPropertyDrawer {

	// プロパティを指定された Rect の中に描画
	function OnGUI (position : Rect, prop : MaterialProperty, label : String, editor : MaterialEditor) {

		// セットアップ
		EditorGUI.BeginChangeCheck ();
		var value : boolean = prop.floatValue != 0.0f;
		EditorGUI.showMixedValue = prop.hasMixedValue;

		// トグル コントロールを表示
		value = EditorGUI.Toggle (position, label, value);

		EditorGUI.showMixedValue = false;
		if (EditorGUI.EndChangeCheck ()) {
			// 変更された場合は新規の値をセット
			prop.floatValue = value ? 1.0f : 0.0f;
		}
	}
}
END EX

ビルトインの MaterialPropertyDrawer は:  ToggleDrawer, EnumDrawer, KeywordEnumDrawer, PowerSliderDrawer。シェーダ コードでは、クラス名の末尾の "Drawer" 修飾子は異彩されません。Unity が Drawer クラスを検索したとき、自動的に "Drawer" を付加します。


__Toggle__ により float をトグルとして表示します。プロパティの値はトグルの状態により 0 または 1 となります。有効であるときシェーダ キーワードで大文字のプロパティ名 + "_ON" 、または明示的に指定されたシェーダ キーワードがセットされます。

BEGIN EX NOCHECK
// セットされたとき "_INVERT_ON" シェーダ キーワードをセット
[Toggle] _Invert ("Invert?", Float) = 0

// セットされたとき "ENABLE_FANCY" シェーダ キーワードをセット
[Toggle(ENABLE_FANCY)] _Fancy ("Fancy?", Float) = 0
END EX


__Enum__ により float プロパティにポップアップ メニューを表示します。列挙体の型名（望ましいのは、複数の型がある場合を想定して完全修飾された名前空間）、または明示的な名前 / 値のペアを指定できます。最大で 7 つの名前 / 値のペアを指定できます。

BEGIN EX NOCHECK
// Blend モードの値
[Enum(UnityEngine.Rendering.BlendMode)] _Blend ("Blend mode", Float) = 1

// Blend モードの値のサブセット、"One" (値は 1) および "SrcAlpha" (値は 5) のみ
[Enum(One,1,SrcAlpha,5] _Blend2 ("Blend mode subset", Float) = 1
END EX


__KeywordEnum__ により float プロパティにポップアップ メニューを表示して、対応するシェーダ キーワードを有効化します。これはシェーダにおいて、シェーダ コードの一部を有効化 / 無効化するために "#pragma multi_compile" とともに使用されます。各々の名前は大文字で "プロパティ名" + "_" + "列挙体名" のシェーダ キーワードを有効化します。最大で 9 つの名前を指定できます。

BEGIN EX NOCHECK
// None,Add,Multiply を選択肢としたポップアップを表示します。
// 各々のオプションは _OVERLAY_NONE, _OVERLAY_ADD, _OVERLAY_MULTIPLY シェーダ キーワードをセットアップ
[KeywordEnum(None, Add, Multiply)] _Overlay ("Overlay mode", Float) = 0

// ...その後のCGPROGRAM コードで:
#pragma multi_compile _OVERLAY_NONE, _OVERLAY_ADD, _OVERLAY_MULTIPLY
// ...
END EX


__PowerSlider__ により Range シェーダ プロパティに対する線形でない反応曲線のスライダーを表示します。

BEGIN EX NOCHECK
// 3.0 反応曲線のスライダー
[PowerSlider(3.0)] _Shininess ("Shininess", Range (0.01, 1)) = 0.08
END EX


パフォーマンス理由により、 EditorGUILayout 関数は MaterialPropertyDrawer と共に使用できません。

SA: [[MaterialProperty]] クラス, [[MaterialHelper]] クラス
