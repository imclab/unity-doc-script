<signature>
GetPixels(int)
</signature>
ピクセルのカラー配列を設定する
この関数はテクスチャの全体のミップレベルのピクセルカラー配列を戻り値とします。

戻り値の配列は、ピクセルが左から右、下から上に（行の次に行を）並べられた平坦化された 2D 配列です。配列の大きさは使用されるミップレベルの幅に高さを掛けた値です。
デフォルトのミップレベルはゼロ（ベース テクスチャ）であり、大きさは単にテクスチャの大きさに相当します。
一般的に、ミップレベルの大きさは @@mipWidth=max(1,width>>miplevel)@@ であり、高さについても同様です。

テクスチャは必ず __Read/Write Enabled__ フラグを Import Settings でセットする必要があり、そうしないと関数がエラーとなります。

特に大きなテクスチャにおいて、 /GetPixels/ を使用するほうが ::ref::GetPixel を繰り返し呼び出しするよりも
高速です。それに加えて /GetPixels/ の場合、個別のミップマップ レベルにアクセスできます。
CONVERTEXAMPLE
BEGIN EX
	// テクスチャの Rect 領域を取得して、Rectの大きさを新規の
	// テクスチャに反映

	// ソースのテクスチャおよび Rect 領域を抽出
	var sourceTex: Texture2D;
	var sourceRect: Rect;


	function Start () {
		// Rect 構造体の値は float のため、最も近い整数に
		// 丸めます
		var x = Mathf.FloorToInt(sourceRect.x);
		var y = Mathf.FloorToInt(sourceRect.x);
		var width = Mathf.FloorToInt(sourceRect.width);
		var height = Mathf.FloorToInt(sourceRect.height);
		
		// ピクセル ブロックを取得し、新規のテクスチャに反映
		var pix = sourceTex.GetPixels(x, y, width, height);
		var destTex = new Texture2D(width, height);
		destTex.SetPixels(pix);
		destTex.Apply();
		
		// 現在のオブジェクトのテクスチャに抽出した Rect 
		// を表示するようにセット
		renderer.material.mainTexture = destTex;
	}
END EX
SA: ::ref::SetPixels, ::ref::mipmapCount.
<signature>
GetPixels(int,int,int,int,int)
</signature>
ピクセルカラーの配列を返します。
この関数は上記の /GetPixels/ の拡張版です。ミップレベル全体を戻り値とせず、
 ''x,y'' を開始地点として /blockWidth/ （幅）と /blockHeight/ （高さ）を掛けた領域のみ戻り値とします。
 ブロックは使用されたミップレベルにフィットする必要があります。戻り値となる配列の大きさは ''blockWidth*blockHeight'' です。
