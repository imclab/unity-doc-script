<signature>
LoadAll(string,Type)
</signature>
Resources フォルダの /path/ におけるフォルダまたはファイルの全てのアセットをロードします。
もし /path/ がフォルダを示す場合、フォルダの全てのアセットを戻り値とします。
もし /path/ がファイルを示す場合、そのアセットのみを戻り値とします。
/type/ のオブジェクトのみを戻り値とします。
自身のプロジェクトにある Assets フォルダの中の任意の Resources フォルダに対して相対的な /path/ で指定されます。
CONVERTEXAMPLE
BEGIN EX
	// "Resources/Textures" フォルダの中の全てのアセットをロード
	// 次に一覧からひとつランダムなものを選択
	// 注意: Random.Range は [low, high] の範囲
	// すなわち、 high は含まれない

	function Start (){
		var go = new GameObject.CreatePrimitive(PrimitiveType.Cube);
		var textures : Object[] = Resources.LoadAll("Textures", Texture2D);
		var texture : Texture2D  = textures[Random.Range(0, textures.Length)];
		go.renderer.material.mainTexture = texture;
	}
END EX
<signature>
LoadAll(string)
</signature>
Resources フォルダの /path/ におけるフォルダまたはファイルの全てのアセットをロードします。
もし /path/ がフォルダを示す場合、フォルダの全てのアセットを戻り値とします。
もし /path/ がファイルを示す場合、そのアセットのみを戻り値とします。
自身のプロジェクトにある Assets フォルダの中の任意の Resources フォルダに対して相対的な /path/ で指定されます。
CONVERTEXAMPLE
BEGIN EX
	// "Resources/Textures" フォルダの中の全てのアセットをロード
	// 次に一覧からひとつランダムなものを選択
	// 注意: Random.Range は [low, high] の範囲
	// すなわち、 high は含まれない

	function Start (){
		var go = new GameObject.CreatePrimitive(PrimitiveType.Cube);
		var textures : Object[] = Resources.LoadAll("Textures");
		var texture : Texture2D  = textures[Random.Range(0, textures.Length)];
		go.renderer.material.mainTexture = texture;
	}
END EX
