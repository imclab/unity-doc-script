スクリプトからメッシュを作成または変更できるようにするクラスです。
メッシュは頂点と
複数の三角形の配列を含んで作成されています。
メッシュ インタフェースを使用したサンプルについては <a href="http://unity3d.com/support/resources/example-projects/procedural-examples.html">プロシージャル のサンプル プロジェクト</a> 

三角配列は頂点配列のインデックスであり、各々の三角ごとに3つの頂点を使用します。

全ての頂点に、法線、二つのテクスチャ座標、カラー、および接線を保持できます。
これらはオプションであり、希望により削除できます。全ての頂点情報は同じ大きさの別の
配列に格納されるため、もし自身のメッシュが 10 個の頂点がある場合、10 個の法線や他の属性も
また存在します。

修正できるメッシュ インタフェースを使用する目的は通常は 3 つほどあります:

__1. ゼロからメッシュを作成__:
必ず次の手順で行なうべきです: 1) ::ref::vertices を割り当て、2) ::ref::triangles を割り当て
CONVERTEXAMPLE
BEGIN EX
var newVertices : Vector3[];
var newUV : Vector2[];
var newTriangles : int[];

function Start () {
	var mesh : Mesh = new Mesh ();
	GetComponent(MeshFilter).mesh = mesh;
	mesh.vertices = newVertices;
	mesh.uv = newUV;
	mesh.triangles = newTriangles;
}
END EX
__2. 毎フレームごとに頂点属性を修正__:
1) 頂点を取得 2) それらを修正 3) それらをメッシュに再び割り当て
CONVERTEXAMPLE
BEGIN EX
function Update () {
	var mesh : Mesh = GetComponent(MeshFilter).mesh;
	var vertices : Vector3[] = mesh.vertices;
	var normals : Vector3[] = mesh.normals;

	for (var i = 0; i < vertices.Length; i++)
		vertices[i] += normals[i] * Mathf.Sin(Time.time);

	mesh.vertices = vertices;
}
END EX
__3. 継続的にメッシュ三角および頂点を変化させる__:
1) ::ref::Clear の呼び出しによりゼロから開始 2) 頂点および他の属性を割り当て 3) 三角頂点を割り当て

新しい頂点や三角を割り当てする前に Clear を呼び出しすることが大切です。
Unity により提供された三角頂点は常に、範囲外の頂点が参照されてないかチェックされます。
Clear を呼び出し、頂点を割り当て、三角を割り当て、という順番を守ることにより範囲外のデータがないことが保証されます。
CONVERTEXAMPLE
BEGIN EX
var newVertices : Vector3[];
var newUV : Vector2[];
var newTriangles : int[];

function Update () {
	var mesh : Mesh = GetComponent(MeshFilter).mesh;

	mesh.Clear();
	// 何らかの計算を行なう
	mesh.vertices = newVertices;
	mesh.uv = newUV;
	mesh.triangles = newTriangles;
}
END EX
