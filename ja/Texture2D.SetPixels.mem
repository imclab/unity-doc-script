<signature>
SetPixels(Color[],int)
</signature>
ピクセルのカラー配列を取得します。
この関数はカラー配列に対してテクスチャのミップレベル全体のピクセルカラーを変更します。変更されたピクセルをグラフィックスカードにアップロードするには ::ref::Apply を呼び出します。
戻り値の配列は、ピクセルが左から右、下から上に（行の次に行を）並べられた平坦化された 2D 配列です。配列の大きさは使用されるミップレベルの幅に高さを掛けた値です。デフォルトのミップレベルはゼロ（ベース テクスチャ）であり、大きさは単にテクスチャの大きさに相当します。
一般的に、ミップレベルの大きさは @@mipWidth=max(1,width>>miplevel)@@ であり、高さについても同様です。

この関数は /ARGB32/, /RGB24/ および /Alpha8/ テクスチャ形式のみ動作します。
他のフォーマットの場合に /SetPixels/ は無視されます。
さらにテクスチャの __Is Readable__ フラグを Import Settings で有効化しておく必要があります。

特に大きなテクスチャにおいて、 /GetPixels/ を使用するほうが ::ref::GetPixel を繰り返し呼び出しするよりも
高速です。それに加えて /GetPixels/ の場合、個別のミップマップ レベルにアクセスできます。

SA: ::ref::GetPixels, ::ref::Apply, ::ref::mipmapCount.
BEGIN EX
	// このスクリプトはテクスチャのミップレベルを異なる色に色付けします。
	// (一つめのレベルは赤、二つめは緑、三つめは青）これを使用して
	// どのミップレベルが実際にどのようにして使用されるか確認できます。

	function Start () {
		// 元のテクスチャを複製してマテリアルに割り当て
		var texture : Texture2D = Instantiate(renderer.material.mainTexture);
		renderer.material.mainTexture = texture;

		// 最初の三つのミップレベルを色付けするのに使用
		var colors = new Color[3];
		colors[0] = Color.red;
		colors[1] = Color.green;
		colors[2] = Color.blue;
		var mipCount = Mathf.Min( 3, texture.mipmapCount );

		// 各々のミップレベルを色付け
		for( var mip = 0; mip < mipCount; ++mip ) {
			var cols = texture.GetPixels( mip );
			for( var i = 0; i < cols.Length; ++i ) {
				cols[i] = Color.Lerp( cols[i], colors[mip], 0.33 );
			}
			texture.SetPixels( cols, mip );
		}

		// 実際に全ての SetPixels を適用、ミップレベルを再計算しない
		texture.Apply( false );
	}
END EX
<signature>
SetPixels(int,int,int,int,Color[],int)
</signature>
ピクセルのカラー配列を取得する
この関数は上記の /GetPixels/ の拡張版です。ミップレベル全体を
修正しませんが、
 ''x,y'' を開始地点として /blockWidth/ （幅）と /blockHeight/ （高さ）を掛けた領域のみ修正します。
/colors/ 配列の大きさは ''blockWidth*blockHeight'' とする必要があり、修正されたブロックは使用されたミップレベルにフィットする必要があります。
