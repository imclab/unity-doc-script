インスペクターの拡張を行う基本クラスです
BEGIN EX
// MyPlayer.js
// これはエディタスクリプトではありません

var armor : int = 75;
var damage : int = 25;
var gun : GameObject;

function Update () {
	// Update ロジックを記述
}
END EX
カスタムエディタを使用して、インスペクタ上のスクリプトの表示を例えば次のように変更することが出来ます:

{img CustomEditor.png}\\
''インスペクタ上のカスタム エディタ''

エディタをカスタムのコンポーネントにアタッチするために [[CustomEditor]] 属性を使用できます。

カスタム エディタ を設計するには複数の方法があります。
エディタが複数オブジェクトの編集をサポートするためには [[CanEditMultipleObjects]] 属性を使用できます。
スクリプト変数を直接編集する代わりに、 [[SerializedObject]] および [[SerializedProperty]] システムを使用するほうが
マルチオブジェクト編集のハンドリング、取り消し、およびプレハブの上書きが出来るというメリットがあります。
BEGIN EX
// SerializedProperties を使用したカスタム エディタ
// マルチオブジェクト編集、取り消し、およびプレハブの上書きの自動ハンドリング
#pragma strict
@CustomEditor(MyPlayer)
@CanEditMultipleObjects
class MyPlayerEditor extends Editor {
	var damageProp : SerializedProperty;
	var armorProp : SerializedProperty;
	var gunProp : SerializedProperty;

	function OnEnable () {
		// SerializedProperties のセットアップ
		damageProp = serializedObject.FindProperty ("damage");
		armorProp = serializedObject.FindProperty ("armor");
		gunProp = serializedObject.FindProperty ("gun");
	}

	function OnInspectorGUI() {
		// serializedProperty を Update。OnInspectorGUIの始めに必ず実行して下さい
		serializedObject.Update ();

		// カスタム GUI コントロールを表示

		EditorGUILayout.IntSlider (damageProp, 0, 100, new GUIContent ("Damage"));
		// 全てのオブジェクトが同じダメージ値の場合のみ damage 進捗バーを表示
		if (!damageProp.hasMultipleDifferentValues)
			ProgressBar (damageProp.intValue / 100.0, "Damage");

		EditorGUILayout.IntSlider (armorProp, 0, 100, new GUIContent ("Armor"));
		// 全てのオブジェクトが同じ armor値の場合のみ armor 進捗バーを表示
		if (!armorProp.hasMultipleDifferentValues)
			ProgressBar (armorProp.intValue / 100.0, "Armor");

		EditorGUILayout.PropertyField (gunProp, new GUIContent ("Gun Object"));

		// serializedProperty への変更を Apply。OnInspectorGUIの最後に必ず実行して下さい
		serializedObject.ApplyModifiedProperties ();
	}

	// カスタム GUILayout 進捗バー
	function ProgressBar (value : float, label : String) {
		// マージンを TextField と同じ設定として進捗バーのための Rect を取得:
		var rect : Rect = GUILayoutUtility.GetRect (18, 18, "TextField");
		EditorGUI.ProgressBar (rect, value, label);
		EditorGUILayout.Space ();
	}
}
END EX
代わりに、もしマルチオブジェクト編集のハンドリング、取り消し、およびプレハブの上書きが
自動ハンドリングが必要な場合、スクリプト変数は [[SerializedObject]]
および [[SerializedProperty]] を使用せずに次のサンプルのようにエディタ上で直接編集できます:
BEGIN EX
// 旧来の方法でのカスタムエディタによりスクリプト変数を直接編集
// マルチオブジェクト編集のハンドリング、取り消し、およびプレハブの上書きハンドリングはしない
@CustomEditor (MyPlayer)
class MyPlayerEditor extends Editor {

	function OnInspectorGUI () {
		target.damage = EditorGUILayout.IntSlider ("Damage", target.damage, 0, 100);
		ProgressBar (target.damage / 100.0, "Damage");

		target.armor = EditorGUILayout.IntSlider ("Armor", target.armor, 0, 100);
		ProgressBar (target.armor / 100.0, "Armor");

		var allowSceneObjects : boolean = !EditorUtility.IsPersistent (target);
		target.gun = EditorGUILayout.ObjectField ("Gun Object", target.gun, GameObject, allowSceneObjects);
	}

	// カスタム GUILayout 進捗バー
	function ProgressBar (value : float, label : String) {
		// マージンを TextField と同じ設定として進捗バーのための Rect を取得:
		var rect : Rect = GUILayoutUtility.GetRect (18, 18, "TextField");
		EditorGUI.ProgressBar (rect, value, label);
		EditorGUILayout.Space ();
	}
}
END EX
