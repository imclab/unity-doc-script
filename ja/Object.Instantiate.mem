<signature>
Instantiate(Object,Vector3,Quaternion)
Instantiate(Object)
</signature>
Clones the object /original/ and returns the clone.
This function makes a copy of an object in a similar way to the Duplicate command in the editor. If you are cloning a [[GameObject]] then you can also optionally specify its position and rotation (these will default to Vector3::ref::zero and Quaternion::ref::identity respectively). If you are cloning a [[Component]] then the GameObject is is attached to will also be cloned, again with an optional position and rotation.

When you clone a [[GameObject]] or [[Component]], all child objects and components will also be cloned with their properties set like those of the original object. However, the ''parent'' of the new object will be null, so it will not be a "sibling" of the original. However, you can still set the parent explicitly if you wish. Also, the active status of a GameObject at the time of cloning will be passed on, so if the original is inactive then the clone will be created in an inactive state too.

SA: [[wiki:Instantiating Prefabs|In depth Prefab Instantiate discussion]].
CONVERTEXAMPLE
BEGIN EX
	// Instantiates 10 copies of prefab each 2 units apart from each other

	var prefab : Transform;

	for (var i : int = 0;i < 10; i++) {
		Instantiate (prefab, Vector3(i * 2.0, 0, 0), Quaternion.identity);
	}
END EX
Instantiate is most commonly used to instantiate projectiles, AI Enemies, particle explosions or wrecked object replacements.
CONVERTEXAMPLE
BEGIN EX
	// Instantiate a rigidbody then set the velocity

	var projectile : Rigidbody;

	function Update () {
		// Ctrl was pressed, launch a projectile
		if (Input.GetButtonDown("Fire1")) {
			// Instantiate the projectile at the position and rotation of this transform
			var clone : Rigidbody;
			clone = Instantiate(projectile, transform.position, transform.rotation);
			
			// Give the cloned object an initial velocity along the current 
			// object's Z axis
			clone.velocity = transform.TransformDirection (Vector3.forward * 10);
		}
	}
END EX
Instantiate can also clone script instances directly.
The entire game object hierarchy will be cloned and the cloned script instance will be returned.
CONVERTEXAMPLE
BEGIN EX
	// Instantiate a prefab with an attached Missile script
	var projectile : Missile;

	function Update () {
		// Ctrl was pressed, launch a projectile
		if (Input.GetButtonDown("Fire1")) {
			// Instantiate the projectile at the position and rotation of this transform
			var clone : Missile;
			clone = Instantiate(projectile, transform.position, transform.rotation);
			
			// Set the missiles timeout destructor to 5
			clone.timeoutDestructor = 5;
		}
	}
END EX
After cloning an object you can also use GetComponent to set properties on a specific component attached to the cloned object.
@param original An existing object that you want to make a copy of.
@param position Position for the new object.
@param rotation Orientation of the new object.
<signature>
</signature>
<txttag>
UNDOC
</txttag>
Clones the object /original/ and returns the clone.
This function preserves the position and rotation of the cloned object.
This is essentially the same as using duplicate command (cmd-d) in Unity.
If the object is a [[Component]] or a [[GameObject]] then entire game object including all components
will be cloned. 
If the game object has a transform all children are cloned as well. Note that the active status of a GameObject will be passed to its clone, so if the original is inactive at the time of cloning, the new clone will initially be inactive too.

SA: [[wiki:Instantiating Prefabs|In depth Prefab Instantiate discussion]].
CONVERTEXAMPLE
BEGIN EX
	// Instantiates prefab when any rigid body enters the trigger.
	// It preserves the prefab's original position and rotation.

	var prefab : Transform;

	function OnTriggerEnter () {
		Instantiate (prefab);
	}
END EX
Note that the Instantiate can clone any type of Object including scripts.
@param original An existing object that you want to make a copy of.
<signature>
Instantiate<T>(T)
</signature>
Generic version. See the [[wiki:Generic Functions|Generic Functions]] page for more details.