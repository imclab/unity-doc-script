<signature>
EnumPopup(Enum,GUILayoutOption[])
EnumPopup(Enum,GUIStyle,GUILayoutOption[])
EnumPopup(string,Enum,GUILayoutOption[])
EnumPopup(string,Enum,GUIStyle,GUILayoutOption[])
EnumPopup(GUIContent,Enum,GUILayoutOption[])
EnumPopup(GUIContent,Enum,GUIStyle,GUILayoutOption[])
</signature>
{img EditorGUILayoutEnumPopup.png}\\
ポップアップで表示されるセレクトボックスを作成します
 Popupと少し違い、Enumを使用します
BEGIN EX
	// ユーザによりオプションの中から選択されたプリミティブのインスタンスを作成

	enum OPTIONS { 
		CUBE = 0, 
		SPHERE = 1, 
		PLANE = 2
	}
	class EditorGUILayoutEnumPopup extends EditorWindow {
		var op : OPTIONS;
		
		@MenuItem("Examples/Editor GUILayout Enum Popup usage")
		static function Init() {
			var window = GetWindow(EditorGUILayoutEnumPopup);
			window.Show();
		}
		function OnGUI() {
			op = EditorGUILayout.EnumPopup("作成するプリミティブ:", op);
			if(GUILayout.Button("作成"))
				InstantiatePrimitive(op);
		}
		function InstantiatePrimitive(op : OPTIONS) {
			switch (op) {
				case OPTIONS.CUBE:
					var cube : GameObject  = GameObject.CreatePrimitive(PrimitiveType.Cube);
	   				cube.transform.position = Vector3.zero;
	   				break;
				case OPTIONS.SPHERE:
					 var sphere : GameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);
					sphere.transform.position = Vector3.zero;
					break;
				case OPTIONS.PLANE:
					var plane : GameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
					plane.transform.position = Vector3.zero;
					break;
				default:
					Debug.LogError("オプションが未知のものです");
					break;
			}
		}
	}
END EX
@param label 左側に表示する文字列
@param selected 選択されたEnum値
@param style スタイル
@param options 幅・高さ
SA: GUILayout::ref::Width, GUILayout::ref::Height, GUILayout::ref::MinWidth, GUILayout::ref::MaxWidth, GUILayout::ref::MinHeight, 
GUILayout::ref::MaxHeight, GUILayout::ref::ExpandWidth, GUILayout::ref::ExpandHeight.
@return ユーザにより列挙体の中から選択されたオプション。
