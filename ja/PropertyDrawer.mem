特定のプロパティのGUIをカスタマイズします
まずは先にCustomPropertyDrawerを御覧ください

PropertyDrawerは「シリアライズ化されているクラス」と「PropertyDrawerを継承したAttribute」に使用することが出来ます

BEGIN EX
// Recipe.js
// これはエディタスクリプトではありません

enum IngredientUnit { Spoon, Cup, Bowl, Piece }

// カスタムのシリアライズ クラス
class Ingredient extends System.Object {
	var name : String;
	var amount : int = 1;
	var unit : IngredientUnit;
}

var potionResult : Ingredient;
var potionIngredients : Ingredient[];

function Update () {
	// ここに Update ロジックを記載...
}
END EX

カスタム PropertyDrawer を使用して、 Ingredient クラスのインスペクタでのあらゆる外見を変更することがd系増す。
インスペクタの Ingredient プロパティの外見をカスタムの PropertyDrawer の有無で比較して下さい：

{img CustomPropertyDrawer_Class.png}\\
''インスペクタ上でカスタムの PropertyDrawer がある場合（左）とない場合（右）のクラス。''

PropertyDrawer を Serializable クラスにアタッチするには [[CustomPropertyDrawer]] 属性を使用して Drawer となっている Serializable クラスを渡します。
BEGIN EX
// IngredientDrawer.js
@CustomPropertyDrawer (Ingredient)
class IngredientDrawer extends PropertyDrawer {

	// 与えられた Rect の中のプロパティを描画
	function OnGUI (position : Rect, property : SerializedProperty, label : GUIContent) {
		// 親プロパティの BeginProperty / EndProperty を使用することは
		// プロパティ全体でプレハブのオーバーライド ロジックが機能します。
		EditorGUI.BeginProperty (position, label, property);
		
		// ラベルを描画
		position = EditorGUI.PrefixLabel (position, GUIUtility.GetControlID (FocusType.Passive), label);
		
		// 子フィールドがインデントされないようにする
		var indent = EditorGUI.indentLevel;
		EditorGUI.indentLevel = 0;
		
		// Rect を計算
		var amountRect = new Rect (position.x, position.y, 30, position.height);
		var unitRect = new Rect (position.x+35, position.y, 50, position.height);
		var nameRect = new Rect (position.x+90, position.y, position.width-90, position.height);
		
		// フィールドの描画 GUIContent.none を各々に渡してラベルなしで描画されるようにする
		EditorGUI.PropertyField (amountRect, property.FindPropertyRelative ("amount"), GUIContent.none);
		EditorGUI.PropertyField (unitRect, property.FindPropertyRelative ("unit"), GUIContent.none);
		EditorGUI.PropertyField (nameRect, property.FindPropertyRelative ("name"), GUIContent.none);
		
		// インデントを元に戻す
		EditorGUI.indentLevel = indent;
		
		EditorGUI.EndProperty ();
	}
}
END EX
PropertyDrawer の他の使用方法はカスタムの [[PropertyAttribute]] を持つスクリプトのメンバーの外見を変更することです。
例えばスクリプトの float や integer を一定の範囲に制限して、インスペクタでスライダーとして表示したいとします。
これはビルトインの [[RangeAttribute]] という名前の [[PropertyAttribute]] を使用することで実現できます。
BEGIN EX
// この float をインスペクタ上で 0 と 10 の間の値をとる スライダーとします。
@Range (0.0, 10.0)
var myFloat = 0.0;
END EX
自身の [[PropertyAttribute]] を作成することも出来ます。[[RangeAttribute]] のコードを一例として使用します。
属性は PropertyAttribute クラスを拡張する必要があります。必要であれば、プロパティは引数を使って、public メンバー変数として格納できます。
BEGIN EX
// これはエディタスクリプトではありません。プロパティ属性クラスは通常のスクリプトファイルに配置されるべきです。
class RangeAttribute extends PropertyAttribute {
	var min : float;
	var max : float;

	function RangeAttribute (min : float, max : float) {
		this.min = min;
		this.max = max;
	}
}
END EX
属性が出来たので、次にその属性を持つプロパティを描画するように PropertyDrawer を作成します。
Drawer はPropertyAttribute クラスを拡張する必要があり、また必須である [[CustomPropertyDrawer]] 属性を持ち、どの属性の Drawerであるか明示します。
BEGIN EX
// PropertyDrawer クラスは Editor という名前のフォルダの中に、エディタ スクリプトとして配置する必要があります。

// RangeDrawer が RangeAttributeを持つプロパティの Drawer であることを明示します。
@CustomPropertyDrawer (RangeAttribute)
class RangeDrawer extends PropertyDrawer {

	// 与えられた Rect の中のプロパティを描画
	function OnGUI (position : Rect, property : SerializedProperty, label : GUIContent) {
		
		// スライダーの範囲が含まれるためため、最初に属性を取得
		var range : RangeAttribute = attribute as RangeAttribute;
		
		// 次にプロパティを、float または integer であるかにもとづき、 Slider または IntSlider として描画します
		if (property.propertyType == SerializedPropertyType.Float)
			EditorGUI.Slider (position, property, range.min, range.max, label);
		else if (property.propertyType == SerializedPropertyType.Integer)
			EditorGUI.IntSlider (position, property, range.min, range.max, label);
		else
			EditorGUI.LabelField (position, label.text, "Use Range with float or int.");
	}
}
END EX
PropertyDrawers はデフォルトで [[EditorGUIUtility.LookLikeInspector|LookLikeInspector]] インデントと連携するように設計されています。
ここでは、 [[EditorGUIUtility.LookLikeControls|LookLikeControls]] を使用したい場合、指定された位置の左右 4 ピクセルを削ります。
BEGIN EX
[CustomPropertyDrawer (typeof (MyClass))]
public class MyDrawer : PropertyDrawer {
	public override void OnGUI (Rect position, SerializedProperty prop, GUIContent label) {
		EditorGUIUtility.LookLikeControls ();
		position.xMin += 4;
		position.xMax -= 4;
		
		// Actual drawing code goes here...
	}
}
END EX
パフォーマンス上の理由により EditorGUILayout 関数は PropertyDrawers と共にに使用できません。

SA: [[PropertyAttribute]] クラス, [[CustomPropertyDrawer]] クラス。
