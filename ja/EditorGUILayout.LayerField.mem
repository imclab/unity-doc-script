<signature>
LayerField(int,GUILayoutOption[])
LayerField(int,GUIStyle,GUILayoutOption[])
LayerField(string,int,GUILayoutOption[])
LayerField(string,int,GUIStyle,GUILayoutOption[])
LayerField(GUIContent,int,GUILayoutOption[])
LayerField(GUIContent,int,GUIStyle,GUILayoutOption[])
</signature>
{img EditorGUILayoutLayerField.png}\\
レイヤーフィールドを作成します
表示される値は「Editor→ProjectSettings→Tags」で表示されるTagManagerのLayerの値になります
戻り値として選択したレイヤー番号が返されます
BEGIN EX
	// 選択されたゲームオブジェクトのレイヤーをセットする簡易的なエディタスクリプト

	class EditorGUILayoutLayerField extends EditorWindow {

		var selectedLayer : int = 0;
		@MenuItem("Examples/Set Layer For Selection")
		static function Init() {
			var window = GetWindow(EditorGUILayoutLayerField);
			window.Show();
		}
		//Disable menu if we dont have at least 1 gameobject selected
		@MenuItem("Examples/Set Layer For Selection", true)
		static function ValidateSelection() {
			return	Selection.activeGameObject != null;
		}
		
		function OnGUI() {
			selectedLayer = EditorGUILayout.LayerField("Layer for Objects:",selectedLayer);
			if(GUILayout.Button("レイヤーをセット!"))
				SetLayer();
		}
		function SetLayer() {
			for(var go : GameObject in Selection.gameObjects)
				go.layer = selectedLayer;
		}
	}
END EX
@param label 左側に表示する文字列、テクスチャ、ツールチップ
@param layer 選択されたレイヤー
@param style スタイル
@param options 幅・高さ
SA: GUILayout::ref::Width, GUILayout::ref::Height, GUILayout::ref::MinWidth, GUILayout::ref::MaxWidth, GUILayout::ref::MinHeight, 
GUILayout::ref::MaxHeight, GUILayout::ref::ExpandWidth, GUILayout::ref::ExpandHeight.
@return ユーザにより選択されたレイヤー。
