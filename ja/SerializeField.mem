Unity De強制的に private フィールドをシリアライズします。
これが必要な場合はほとんどありません。
Unity がスクリプトをシリアライズするとき、 public フィールドのみをシリアライズします。
もし追加で Unity により private フィールドのひとつをシリアライズしたいとき
フィールドに SerializeField を追加します。

Unity は全てのスクリプト コマンドをシリアライズし、新規のアセンブリをリロードし、
スクリプト コンポーネントをシリアライズされたバージョンから再作成します。
このシリアライズ処理は .NET のシリアライズ機能でなく、 Unity 内部の処理で
実行されます。

シリアライズのシステムにより次のことが出来ます:

- public な非 static フィールドをシリアライズ（Serializable 型）\\
- [SerializeField] 属性でマーキングされた非 public 非 static フィールドをシリアライズ\\
- static フィールドはシリアライズ出来ない\\
- プロパティはシリアライズ出来ない\\

フィールドは Unity がシリアライズできる型の場合のみシリアライズされます。

__シリアライズできる型:__

- UnityEngine.Object から派生した全てのクラス、例えば Gameobject, Commponent, MonoBehaviour, Texture2D, AnimationClip 等々
- int, string, float, bool など全ての基本データ型
- いくつかのビルトインの型、例えば Vector2, Vector3, Vector4, Quaternion, Matrix4x4, Color, Rect, Layermask 等々
- Serialize 型の配列 \\
- Serialize 型のリスト（Unity 2.6 より登場）\\
- 列挙体

重要な注意: リスト（または配列）にひとつの要素を二回入れると、
リストがシリアライズされるとき、新規のリストで二回複製が存在するのでなく、代わりにその要素が二つ発生します。

__ヒント:__ Unity は Dictionary をシリアライズしませんが、キーのための List<> 、
値のための List<> を格納し、非シリアライズされたディクショナリに Awake() で連結できます。
これによりディクショナリを修正して "保存" したい場合の問題の解決策にはなりませんが、
他の場合には便利なテクニックです。

UnityScript ユーザ向け: C# のフィールドは UnityScript ではスクリプト変数であり
[SerializeField] は @SerializeField と表現します。クラスで [Serializable] は UnityScript において @script Serializable となります。
BEGIN EX
// Javascript サンプル

// public であるためシリアライズされるフィールド
var name = "John";

// private であるためシリアライズされないフィールド
private var age = 40;

// SerializeField 属性が適用されているため
// private であるがシリアライズされるフィールド
@SerializeField
private var hasHealthPotion:boolean = true;

function Update () {
}
END EX
BEGIN EX NOCHECK
//C# サンプル
using UnityEngine;

public class SomePerson : MonoBehaviour {
	// public であるためシリアライズされるフィールド
	public string name = "John";

	// private であるためシリアライズされないフィールド
	private int age = 40;

	// SerializeField 属性が適用されているため
	// private であるがシリアライズされるフィールド
	[SerializeField]
	private bool hasHealthPotion = true;

	void Update () {
	}
}
END EX
