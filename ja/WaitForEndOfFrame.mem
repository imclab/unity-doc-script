スクリーン上のレンダリングが完了するまで待ちます。
ディスプレイをテクスチャに読み込み、画像イメージ ファイルとしてエンコードして（Texture2D.ReadPixels および Texture2D.EncodeToPNG）、どこかに送信するために使用できます。
CONVERTEXAMPLE
BEGIN EX
yield new WaitForEndOfFrame ();
END EX
別のサンプル:
CONVERTEXAMPLE
BEGIN EX
// スクリーンショットを PNG ファイルとして保存
import System.IO;

// ただちにスクリーンショットを取得
function Start() {
	UploadPNG();
}

function UploadPNG() {
	// We should only read the screen bufferafter rendering is complete
	yield WaitForEndOfFrame();

	// スクリーン サイズ と同等の大きさのテクスチャを作成、 RGB24 形式
	var width = Screen.width;
	var height = Screen.height;
	var tex = new Texture2D( width, height, TextureFormat.RGB24, false );
	// テクスチャにスクリーンのコンテンツを読み込み
	tex.ReadPixels( Rect(0, 0, width, height), 0, 0 );
	tex.Apply();

	// テクスチャを PNG へとエンコード
	var bytes = tex.EncodeToPNG();
	Destroy( tex );

	// テスト目的で、ファイルをプロジェクトフォルダにも書き込み
	// File.WriteAllBytes(Application.dataPath + "/../SavedScreen.png", bytes);


	// ウェブフォームを作成
	var form = new WWWForm();
	form.AddField("frameCount", Time.frameCount.ToString());
	form.AddBinaryData("fileUpload",bytes);

	// CGI スクリプトへアップロード
	var w = WWW("http://localhost/cgi-bin/env.cgi?post", form);
	yield w;
	if (w.error != null)
		print(w.error);
	else
		print("スクリーンショットのアップロード完了");
}
END EX
CONVERTEXAMPLE
BEGIN EX
// ゲームビューでアルファ チャネルのコンテンツを表示

private var mat : Material;

// フレームが完全にレンダリングされた後、
// アルファ チャネルを抽出するフルスクリーンの Quad を描画
function Start() {
	while (true) {
		yield WaitForEndOfFrame();

		if( !mat ) {
			mat = new Material( "Shader \"Hidden/Alpha\" {" +
				"SubShader {" +
				"    Pass {" +
				"        ZTest Always Cull Off ZWrite Off" +
				"        Blend DstAlpha Zero" +
				"        Color (1,1,1,1)" +
				"    }" +
				"}" +
				"}"
			);
		}
		GL.PushMatrix ();
		GL.LoadOrtho ();
		for (var i = 0; i < mat.passCount; ++i) {
			mat.SetPass (i);
			GL.Begin( GL.QUADS );
			GL.Vertex3( 0, 0, 0.1 );
			GL.Vertex3( 1, 0, 0.1 );
			GL.Vertex3( 1, 1, 0.1 );
			GL.Vertex3( 0, 1, 0.1 );
			GL.End();
		}
		GL.PopMatrix ();
	}
}
END EX
