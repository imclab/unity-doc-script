<signature>
SetPixels32(Color32[],int)
</signature>
Color32 形式のピクセルのカラー配列を取得する
この関数は Color32 配列によりテクスチャのミップレベル全体のピクセルカラーを変更します。
::ref::Apply を呼び出しして変更されたピクセルをグラフィックス カードに実際に
アップロードします。

/colors/ 配列は、ピクセルが左から右、下から上に（行の次に行を）並べられた平坦化された 2D 配列です。配列の大きさは使用されるミップレベルの幅に高さを掛けた値です。
デフォルトのミップレベルはゼロ（ベース テクスチャ）であり、大きさは単にテクスチャの大きさに相当します。
一般的に、ミップレベルの大きさは @@mipWidth=max(1,width>>miplevel)@@ であり、高さについても同様です。

この関数は /ARGB32/ テクスチャ形式でのみ動作します。
他の形式では /SetPixels32/ は無視されます。
テクスチャは必ず __Is Readable__ フラグを Import Settings でセットする必要があります。

特に大きなテクスチャにおいて、 /GetPixels/ を使用するほうが ::ref::GetPixel を繰り返し呼び出しするよりも
高速です。それに加えて /GetPixels/ の場合、個別のミップマップ レベルにアクセスできます。

/SetPixels32/ を使用するほうが ::ref::SetPixels の呼び出しよりも高速です。

SA: ::ref::SetPixels, ::ref::GetPixels32, ::ref::GetPixels, ::ref::Apply, ::ref::mipmapCount.
BEGIN EX
	// このスクリプトでテクスチャのミップレベルを異なるカラーで色付けします
	// (第一レベル 赤、第二レベル 赤、第三レベル 青）。どのミップレベルがどのように
	// 使用されているか確認するのに使用できます。

	function Start () {
		// 元のテクスチャを複製し、マテリアルを割り当て
		var texture : Texture2D = Instantiate(renderer.material.mainTexture);
		renderer.material.mainTexture = texture;

		// 最初の 3 つのミップレベルを色付けするのに使用するカラー
		var colors = new Color32[3];
		colors[0] = Color.red;
		colors[1] = Color.green;
		colors[2] = Color.blue;
		var mipCount = Mathf.Min( 3, texture.mipmapCount );

		// 各々のミップレベルを色付け
		for( var mip = 0; mip < mipCount; ++mip ) {
			var cols = texture.GetPixels32( mip );
			for( var i = 0; i < cols.Length; ++i ) {
				cols[i] = Color32.Lerp( cols[i], colors[mip], 0.33 );
			}
			texture.SetPixels32( cols, mip );
		}

		// 全ての SetPixels32 を実際に適用、ミップレベルは再計算しない
		texture.Apply( false );
	}
END EX
