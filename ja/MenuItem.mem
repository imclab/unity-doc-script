MenuItem 属性によりメインメニューおよびインスペクタのコンテキストメニューにメニューアイテムを追加できます。
MenuItem 属性により任意の static 関数をメニューコマンドに使用できます。MenuItem 属性では static 関数のみが使用できます。

ホットキーを作成するには次の特殊記号が使用できます： __%__ (Windows上で Ctrlキー, OS X上で Cmdキー), __#__ (Shiftキー), __&__ (Altキー), <b>_</b> (キー修飾子なし). 例えば Shift + Alt + G のメニューを作成するには <tt>"MyMenu/Do Something #&g"</tt> を使用します。__G__ キーのみ（キー修飾子なし）でホットキーを作成するには <tt>"MyMenu/Do Something _g"</tt> を使用します。

いくつかの特殊記号はホットキーとしてサポートされていて、例えば "#LEFT" は Shift + 左矢印キーにマッピングされます。このようにサポートされているキーは 上下左右の矢印キー、F1 ～ F12 キー、Home キー、 End キー、 Page Up キー、Page Down キーです。（LEFT, RIGHT, UP, DOWN, F1 .. F12, HOME, END, PGUP, PGDN）

ホットキーの文字列の前にスペース文字を含める必要があります(<tt>"MyMenu/Do_g"</tt> はホットキーとして認識されず, 一方で <tt>"MyMenu/Do _g"</tt> は認識されます)。
BEGIN EX
// JavaScript サンプル:

// メニューバー上で "Do Something" を MyMenuに追加
@MenuItem ("MyMenu/Do Something")
static function DoSomething () {
	Debug.Log ("Doing Something...");
}


// 条件つきメニューアイテム
// メニューバー上で "Log Selected Transform Name" を MyMenuに追加
// 二つ目の関数によりメニューアイテムに条件をつけて
// Transform が選択されている場合のみ有効化されます
@MenuItem ("MyMenu/Log Selected Transform Name")
static function LogSelectedTransformName () {
	Debug.Log ("選択された Transform があるオブジェクトは " + Selection.activeTransform.gameObject.name + "。");
}

// 上記の関数に定義されたメニューアイテムに条件をつける
// 関数が false を返した場合メニューアイテムを無効化
@MenuItem ("MyMenu/Log Selected Transform Name", true)
static function ValidateLogSelectedTransformName () {
	// Transform が選択されてない場合 false を返す
	return Selection.activeTransform != null;
}


// メニューバー上で "Do Something with a Shortcut Key" を MyMenuに追加し
// ショートカットキーを追加（Windows 上で Ctrl + G, OS X 上で Cmd + G）
@MenuItem ("MyMenu/Do Something with a Shortcut Key %g")
static function DoSomethingWithAShortcutKey () {
	Debug.Log ("ショートカットキー付きで Doing something...");
}


// Rigidbody のコンテキストメニューに "Double Mass" という名前のメニューアイテムを追加
@MenuItem ("CONTEXT/Rigidbody/Double Mass")
static function DoubleMassFromContext (command : MenuCommand) {
	var body : Rigidbody = command.context;
	body.mass = body.mass * 2;
	Debug.Log ("Rigidbody の Mass を " + body.mass + " にコンテキストメニューより変更");
}
END EX
BEGIN EX NOCHECK
// C# サンプル:
using UnityEditor;
using UnityEngine;
public class MenuTest : MonoBehaviour {

	// メニューバー上で "Do Something" を MyMenuに追加
	[MenuItem ("MyMenu/Do Something")]
	static void DoSomething () {
		Debug.Log ("Doing Something...");
	}


	// 条件つきメニューアイテム
	// メニューバー上で "Log Selected Transform Name" を MyMenuに追加
	// 二つ目の関数によりメニューアイテムに条件をつけて
	// Transform が選択されている場合のみ有効化されます
	[MenuItem ("MyMenu/Log Selected Transform Name")]
	static void LogSelectedTransformName ()
	{
		Debug.Log ("選択された Transform があるオブジェクトは " + Selection.activeTransform.gameObject.name + "。");
	}

	// 上記の関数に定義されたメニューアイテムに条件をつける
	// 関数が false を返した場合メニューアイテムを無効化
	[MenuItem ("MyMenu/Log Selected Transform Name", true)]
	static bool ValidateLogSelectedTransformName () {
		// Return false if no transform is selected.
		return Selection.activeTransform != null;
	}


	// メニューバー上で "Do Something with a Shortcut Key" を MyMenuに追加し
	// ショートカットキーを追加（Windows 上で Ctrl + G, OS X 上で Cmd + G）
	[MenuItem ("MyMenu/Do Something with a Shortcut Key %g")]
	static void DoSomethingWithAShortcutKey () {
		Debug.Log ("ショートカットキー付きで Doing something...");
	}

	// Rigidbody のコンテキストメニューに "Double Mass" という名前のメニューアイテムを追加
	[MenuItem ("CONTEXT/Rigidbody/Double Mass")]
	static void DoubleMass (MenuCommand command) {
		Rigidbody body = (Rigidbody)command.context;
		body.mass = body.mass * 2;
		Debug.Log ("Rigidbody の Mass を " + body.mass + " にコンテキストメニューより変更");
	}
}
END EX
