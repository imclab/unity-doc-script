<suggestedtype>
class
</suggestedtype>
<txttag>
CSNONE
</txttag>
<signature>
Array
</signature>
配列によりひとつの変数に複数のオブジェクトを格納できます。
Array クラスは Javascript でのみ利用可能です。
C# または Javascript での ArrayList, Dictionarie または Hashtable の詳細については
<a href="http://msdn2.microsoft.com/en-us/library/system.collections.arraylist_members(VS.80).aspx">ここを参照下さい。</a>

__Array クラスで実現できることの基本的なサンプルです: __
BEGIN EX
function Start () {
	var arr = new Array ();

	// ひとつの要素を追加
	arr.Push ("Hello");
	
	// 最初の要素 ("Hello") を表示
	print(arr[0]);

	// 配列をリサイズ
	arr.length = 2;
	// Assign "World" to the second element
	arr[1] = "World";
	
	// 配列全体を反復
	for (var value : String in arr) {
		print(value);
	}
}
END EX
Unity には二種類の配列があり、ビルトインの配列と通常の Javascript 配列があります。
__ビルトイン配列（ネイティブ .NET 配列）は非常に高速かつ効率的ですがリサイズできません__

これらは static に型宣言されていて、インスペクタで編集可能です。次にビルトインの配列を使用する基本的なサンプルを示します:
BEGIN EX
// インスペクタで float 配列を公開し
// そこで編集できるようにする
var values : float[];

function Start () {
	// 配列全体を反復
	for (var value in values) {
		print(value);
	}

	// ビルトイン配列はリサイズできないため
	// リサイズしたい場合は再作成の必要がある
	values = new float[10];

	// 二つめの要素を割り当て
	values[1] = 5.0;
}
END EX
ビルトイン配列はパフォーマンスが重要なコードでは便利です（Unity の Javascript およびビルトイン配列では [[Mesh|Mesh インタフェース]] を使用して秒間200万頂点を容易に処理できます。）

一方で通常の Javascript 配列はリサイズやソートおよび配列クラスで期待する他の全ての操作ができます。
Javascript 配列はインスペクタで表示されません。
__Javascript 配列とビルトイン配列どうしで簡単に変換が出来ます。 __
BEGIN EX
function Start () {
    var array = new Array (Vector3(0, 0, 0), Vector3(0, 0, 1));
    array.Push(Vector3(0, 0, 2));
    array.Push(Vector3(0, 0, 3));

    // Javascript 配列をビルトイン配列へと複製
    var builtinArray : Vector3[] = array.ToBuiltin(Vector3) as Vector3[];
    
    // ビルトイン配列をJavascript 配列に割り当て
    Assign the builtin array to a js Array
    var newarr = new Array (builtinArray);
    
    // newarr は配列を同じ要素を格納
    print (newarr);
}
END EX
Unity のネーミングルールにもとづき配列の関数が大文字であることに注意して下さい。
Javascript ユーザにとって便利なことに、配列クラスで Unity は小文字の関数もまた許容します。

 __注意:__ Unity は List のリストや Array の配列といったシリアライズはサポートしません。
