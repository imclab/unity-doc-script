<signature>
BuildAssetBundleExplicitAssetNames(Object[],string[],string,BuildAssetBundleOptions)
BuildAssetBundleExplicitAssetNames(Object[],string[],string,uint,BuildAssetBundleOptions)
BuildAssetBundleExplicitAssetNames(Object[],string[],string)
BuildAssetBundleExplicitAssetNames(Object[],string[],string,uint)
BuildAssetBundleExplicitAssetNames(Object[],string[],string,BuildAssetBundleOptions,BuildTarget)
BuildAssetBundleExplicitAssetNames(Object[],string[],string,uint,BuildAssetBundleOptions,BuildTarget)
</signature>
Builds an asset bundle, with custom names for the assets __(Unity Pro only)__.
Creates a compressed unity3d file that contains a collection of /assets/. AssetBundles can contain any asset found in the project folder.

In the /assetNames/ parameter, supply an array of strings of the same size as the number of assets.
These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset.
Use ::ref::BuildAssetBundle to just use the asset's path names instead.

The compressed asset bundle file will be saved at /pathName/.
/options/ allows you to automatically include dependencies or always include complete assets instead of just the exact referenced objects. The optional /crc/ output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.

The function returns a boolean value which is true if the build succeeded and false otherwise.

SA: ::ref::BuildAssetBundle, [[AssetBundle]] class, WWW.assetBundle.